{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\renzp\\\\repos\\\\StockMarketApp\\\\stockssim-frontend\\\\src\\\\components\\\\Chatbot.js\",\n  _s = $RefreshSig$();\n// src/components/Chatbot.js\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    user: 'bot',\n    text: 'Hello! How can I assist you with your stock trading?'\n  }]);\n  const [input, setInput] = useState('');\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    setMessages([...messages, {\n      user: 'me',\n      text: input\n    }]);\n    try {\n      // Send the input to the Flask backend\n      const response = await fetch('http://localhost:5000/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          question: input\n        })\n      });\n      const data = await response.json();\n      const botResponse = data.answer || \"Sorry, I couldn't understand that.\";\n\n      // Add the bot's response to the chat\n      setMessages(prevMessages => [...prevMessages, {\n        user: 'bot',\n        text: botResponse\n      }]);\n    } catch (error) {\n      console.error(\"Error fetching chatbot response:\", error);\n      setMessages(prevMessages => [...prevMessages, {\n        user: 'bot',\n        text: \"There was an error connecting to the server.\"\n      }]);\n    }\n\n    // Clear the input field\n    setInput('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.chatWindow,\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: message.user === 'me' ? styles.myMessage : styles.botMessage,\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      style: styles.input,\n      value: input,\n      onChange: e => setInput(e.target.value),\n      placeholder: \"Ask me something...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      style: styles.button,\n      onClick: sendMessage,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"pUL+nLD4BSqFyruIb60bzvSzfeM=\");\n_c = Chatbot;\nconst styles = {\n  container: {\n    padding: '20px'\n  },\n  chatWindow: {\n    border: '1px solid #ddd',\n    height: '400px',\n    padding: '10px',\n    overflowY: 'scroll'\n  },\n  myMessage: {\n    textAlign: 'right',\n    padding: '10px',\n    backgroundColor: '#f0f0f0',\n    marginBottom: '5px'\n  },\n  botMessage: {\n    textAlign: 'left',\n    padding: '10px',\n    backgroundColor: '#d0d0f0',\n    marginBottom: '5px'\n  },\n  input: {\n    padding: '10px',\n    width: '80%',\n    marginRight: '10px'\n  },\n  button: {\n    padding: '10px',\n    backgroundColor: '#4CAF50',\n    color: 'white',\n    border: 'none',\n    cursor: 'pointer'\n  }\n};\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","user","text","input","setInput","sendMessage","trim","response","fetch","method","headers","body","JSON","stringify","question","data","json","botResponse","answer","prevMessages","error","console","style","styles","container","children","chatWindow","map","message","index","myMessage","botMessage","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","button","onClick","_c","padding","border","height","overflowY","textAlign","backgroundColor","marginBottom","width","marginRight","color","cursor","$RefreshReg$"],"sources":["C:/Users/renzp/repos/StockMarketApp/stockssim-frontend/src/components/Chatbot.js"],"sourcesContent":["// src/components/Chatbot.js\r\nimport React, { useState } from 'react';\r\n\r\nconst Chatbot = () => {\r\n  const [messages, setMessages] = useState([\r\n    { user: 'bot', text: 'Hello! How can I assist you with your stock trading?' },\r\n  ]);\r\n  const [input, setInput] = useState('');\r\n\r\n  const sendMessage = async () => {\r\n    if (!input.trim()) return;\r\n    \r\n    setMessages([...messages, { user: 'me', text: input }]);\r\n    \r\n    try {\r\n      // Send the input to the Flask backend\r\n      const response = await fetch('http://localhost:5000/chat', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ question: input })\r\n      });\r\n\r\n      const data = await response.json();\r\n      const botResponse = data.answer || \"Sorry, I couldn't understand that.\";\r\n\r\n      // Add the bot's response to the chat\r\n      setMessages(prevMessages => [...prevMessages, { user: 'bot', text: botResponse }]);\r\n  } catch (error) {\r\n      console.error(\"Error fetching chatbot response:\", error);\r\n      setMessages(prevMessages => [...prevMessages, { user: 'bot', text: \"There was an error connecting to the server.\" }]);\r\n  }\r\n\r\n  // Clear the input field\r\n    setInput('');\r\n  };\r\n\r\n  return (\r\n    <div style={styles.container}>\r\n      <div style={styles.chatWindow}>\r\n        {messages.map((message, index) => (\r\n          <div key={index} style={message.user === 'me' ? styles.myMessage : styles.botMessage}>\r\n            {message.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <input\r\n        type=\"text\"\r\n        style={styles.input}\r\n        value={input}\r\n        onChange={(e) => setInput(e.target.value)}\r\n        placeholder=\"Ask me something...\"\r\n      />\r\n      <button style={styles.button} onClick={sendMessage}>Send</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  container: { padding: '20px' },\r\n  chatWindow: { border: '1px solid #ddd', height: '400px', padding: '10px', overflowY: 'scroll' },\r\n  myMessage: { textAlign: 'right', padding: '10px', backgroundColor: '#f0f0f0', marginBottom: '5px' },\r\n  botMessage: { textAlign: 'left', padding: '10px', backgroundColor: '#d0d0f0', marginBottom: '5px' },\r\n  input: { padding: '10px', width: '80%', marginRight: '10px' },\r\n  button: { padding: '10px', backgroundColor: '#4CAF50', color: 'white', border: 'none', cursor: 'pointer' },\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}